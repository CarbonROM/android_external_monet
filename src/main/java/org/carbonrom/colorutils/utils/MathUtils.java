/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is automatically generated. Do not modify it.

package org.carbonrom.colorutils.utils;

/** Utility methods for mathematical operations. */
public class MathUtils {
  private MathUtils() {}

  /**
   * Clamps an integer between two integers.
   *
   * @return input when min <= input <= max, and either min or max otherwise.
   */
  public static int clampInt(int min, int max, int input) {
    if (input < min) {
      return min;
    } else {
      if (input > max) {
        return max;
      }
    }
    return input;
  }

  /**
   * The linear interpolation function.
   *
   * @return start if amount = 0 and stop if amount = 1
   */
  public static double lerp(double start, double stop, double amount) {
    return (1.0 - amount) * start + amount * stop;
  }

  /**
   * Sanitizes a degree measure as an integer.
   *
   * @return a degree measure between 0 (inclusive) and 360 (exclusive).
   */
  public static int sanitizeDegreesInt(int degrees) {
    degrees = degrees % 360;
    if (degrees < 0) {
      degrees = degrees + 360;
    }
    return degrees;
  }

  /** Distance of two points on a circle, represented using degrees. */
  public static double differenceDegrees(double a, double b) {
    return 180.0 - Math.abs(Math.abs(a - b) - 180.0);
  }

  /** Multiplies a 1x3 row vector with a 3x3 matrix. */
  public static double[] matrixMultiply(double[] row, double[][] matrix) {
    double a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];
    double b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];
    double c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];
    return new double[] {a, b, c};
  }

}

